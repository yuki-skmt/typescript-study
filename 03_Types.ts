namespace AnyType {
    /*=================================================
     *【any型】
     * ・型がわからない場合にデフォルトで割り当てられる型。
     * ・「全て」の値の集合であり、「何でも」行うことができる。
     * 　→型安全性を保証するために極力使用するべきではない。
     *================================================*/
    // エラーにならない
    let a: any = 666;
    let b: any = ['danger'];
    let c = a + b; // !!!
}

namespace UnknownType {
    /*=================================================
     *【unknown型】
     * ・anyと同様に、任意の値を表す。
     * ・型の絞り込みを行うまで、使用が許可されない。
     *================================================*/
    let a: unknown;
    // 絞り込み前なのでエラーになる
    //a + 2;

    let b: unknown = 1;
    if (typeof b === 'number') {
        // 絞り込み後なのでエラーにならない
        b + 2;
    }
}

namespace BooleanType {
    /*=================================================
     *【boolean型】
     * ・true/falseからなる。
     * ・比較ができる。(==, ===, ||, &&, ?)
     * ・否定ができる。(!)
     *================================================*/
    // 推論可能
    let a = true;
    var b = false;
    const c = true;

    // 明示的に示すことができる
    let d: boolean = true;

    // 特定のbooleanであることを示すことができる
    let e: true = true;

    // エラー：特定のboolean型にはそれ以外割当不可。
    //let f: true = false;
}

namespace NumberType {
    /*=================================================
     *【number型】
     * ・整数、浮動小数点数、正数、負数、無限大(Infinity)、非数(NaN)などの集まり。
     * ・加算(+)、減算(-)、余剰(%)、比較(<)などができる。
     *================================================*/
    // 推論可能
    let a = 1234;
    var b = Infinity * 0.1;
    const c = 5678;

    // 比較可能(boolean)
    let d = a < b;

    // 明示的に示すことができる
    let e: number = 100;

    // 特定の値であることを示すことができる
    let f: 26.218 = 26.218;

    // エラー：特定のnumber型にはそれ以外割当不可。
    //let g: 26.218 = 10;
}
